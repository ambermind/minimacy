/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

use core.crypto.asn1;;
use core.crypto.rsa;;
use core.crypto.sign;;
use core.crypto.oid;;
use core.crypto.pem;;

//-------------RSA-----------------------------
fun _rsaFromAsn1 asn1=
	let listFromAsn1 asn1 -> content in
	if 9==listLength content then
	let content -> (version:numbers) in
	if 0==intFromAsn1 version then
	let hashmapCreate 4 -> h in
	let OID_MODULUS:OID_PUBEXP:"PRIVEXP":"P1":"P2":"E1":"E2":"C":nil -> fields in
	(
		for v in asn1ListOfHex numbers do 
		(
			hashmapSet h (head fields) v;
			set fields=tail fields
		);
		h
	);;
fun _keyFromAsn1 asn1=
//	asn1Echo "" asn1;
	let listFromAsn1 asn1 ->(version:encryption:raw:_) in
	if 0==intFromAsn1 version then
	let strFromAsn1 head listFromAsn1 encryption -> encryption in 
	if encryption==OID_rsaEncryption then
	_rsaFromAsn1 head asn1Unpack strFromAsn1 raw;;

fun keyFromDER der= derProcess der #_keyFromAsn1;;
fun rsaFromDER der= derProcess der #_rsaFromAsn1;;

fun keyFromPEM pem pwd=
	let head pemDecode pem pwd ->[name der] in
	match name with
		"PRIVATE KEY"->keyFromDER der,
		"RSA PRIVATE KEY"->rsaFromDER der;;

fun rsaFromPEM pem pwd= if pem<>nil then rsaImport keyFromPEM pem pwd;;
