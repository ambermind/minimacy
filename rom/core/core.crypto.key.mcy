/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

use core.crypto.asn1;;
use core.crypto.rsa;;
use core.crypto.ec;;
use core.crypto.oid;;
use core.crypto.pem;;

sum Key = rsaKey _, ecKey _;;

fun rsaFromKey key = match key with rsaKey rsa -> rsa;;
fun ecFromKey key = match key with ecKey ec -> ec;;

//-------------RSA-----------------------------
fun _rsaFromAsn1 info asn1=
	let listFromAsn1 asn1 -> content in
	if 9==listLength content then
	let content -> version:numbers in
	if 0==intFromAsn1 version then
	let asn1ListOfBignum numbers -> modulus:pubExp:privExp:P:Q:dP:dQ:qInv:_ in
	rsaKey rsaFromPQ pubExp P Q;;

fun _rsaPubFromAsn1 info asn1=
//	asn1Echo "" asn1;
	let asn1ListOfBignum listFromAsn1 asn1 -> modulus:pubExp:_ in
	rsaKey rsaFromPublic modulus pubExp;;

fun asn1RsaKeyPub modulus pubExp=
	asn1Seq
		(asn1Integer strConcat "\0" strFromBig modulus nil):	// start with \0 to force modulus to be considered as unsigned
		(asn1Integer strFromBig pubExp nil):nil;;

fun asn1RsaEncryption rsa=
	let rsaModulus rsa -> modulus in
	let rsaPubExp rsa -> pubExp in
	asn1Seq
		(asn1Seq (asn1ObjectIdentifier OID_rsaEncryption):asn1Null:nil):
		(asn1BitString 0 asn1Pack asn1RsaKeyPub modulus pubExp):nil;;

//-------------EC------------------------------
fun ecCurveFromOID oid=
	match oid with
		OID_prime256v1 -> ecSecp256r1,
		OID_secp384r1 -> ecSecp384r1;;

fun _ecFromAsn1 info asn1=
	let listFromAsn1 asn1 -> content in
	if 4<=listLength content then
	let content ->  version:priv:curve:pub:_ in
	if 1==intFromAsn1 version then
	let listFromAsn1 asn1 -> _:priv:curve:pub:_ in 
	let ecCurveFromOID (strFromAsn1 head listFromAsn1 curve) -> ec in
	ecKey ecKeyFromPrivate ec bigFromHex hexFromStr strFromAsn1 priv;;

fun _ecPubFromAsn1 info asn1 curve =
	let ecCurveFromOID strFromAsn1 curve -> ec in
	if ec<>nil then
	ecKey ecKeyFromPublic ec strFromAsn1 asn1;;

//-------------Any------------------------------
fun _keyFromAsn1 info asn1=
//	asn1Echo "" asn1;
	let listFromAsn1 asn1 ->(version:encryption:raw:_) in
	if 0==intFromAsn1 version then
	let strFromAsn1 head listFromAsn1 encryption -> encryption in 
	match encryption with
		OID_rsaEncryption -> _rsaFromAsn1 info head asn1Unpack strFromAsn1 raw,
		OID_ecPublicKey -> _ecFromAsn1 info head asn1Unpack strFromAsn1 raw;;

fun _keyPubFromAsn1 info asn1=
//	asn1Echo "" asn1;
	let listFromAsn1 asn1 ->(encryption:raw:_) in
	let listFromAsn1 encryption -> lEncryption in
	let strFromAsn1 head lEncryption -> encryptionAlgo in 
	match encryptionAlgo with
		OID_rsaEncryption -> _rsaPubFromAsn1 info head asn1Unpack strFromAsn1 raw,
		OID_ecPublicKey -> _ecPubFromAsn1 info raw head tail lEncryption;;


fun _keyFromDER der= derProcess der #_keyFromAsn1;;
fun _rsaFromDER der= derProcess der #_rsaFromAsn1;;
fun _ecFromDER der= derProcess der #_ecFromAsn1;;
fun _keyPubFromDER der= derProcess der #_keyPubFromAsn1;;

fun keyFromPEM pem pwd=
	let head pemDecode pem pwd ->[name der] in
	match name with
		"PRIVATE KEY"->_keyFromDER der,
		"RSA PRIVATE KEY"->_rsaFromDER der,
		"EC PRIVATE KEY"->_ecFromDER der,
		"PUBLIC KEY"->_keyPubFromDER der;;

fun rsaFromPEM pem pwd= rsaFromKey keyFromPEM pem pwd;;
fun ecKeyFromPEM pem pwd= ecFromKey keyFromPEM pem pwd;;

fun keyIsPrivatep key= match key with
	ecKey ec  -> ecIsPrivate ec,
	rsaKey rsa-> rsaIsPrivate rsa;;

fun asn1KeyEncryption key= match key with
//	ecKey ec  -> asn1EcEncryption ec,	// TODO
	rsaKey rsa-> asn1RsaEncryption rsa;;

fun keyDump key= match key with
	ecKey ec  -> (ecKeyDump ec; nil),
	rsaKey rsa-> (rsaDump rsa; nil);
	key;;

fun rsaPublicFromCertificate certificate=
	let bigFromHex oidHashmapMODULUS certificate -> modulus in
	let bigFromHex oidHashmapPUBEXP certificate -> pubExp in
	rsaFromPublic modulus pubExp;;

fun ecPublicFromCertificate certificate=
	let ecCurveFromOID hashmapGet certificate OID_CURVE -> ec in
	ecKeyFromPublic ec (strFromHex oidHashmapPUBKEY certificate);;

fun ecPointFromAsn1 asn1=
	let listFromAsn1 head asn1Unpack asn1 -> x:y:_ in
	[(bigFromStr strFromAsn1 x) (bigFromStr strFromAsn1 y)];;

fun _asn1EcCoord x=
	let strFromBig x nil -> str in
	strConcat (if bitTest 0x80 strGet str 0 then "\z") str;;

fun asn1EcPoint [x y]=
	asn1Pack asn1Seq
		(asn1Integer _asn1EcCoord x):
		(asn1Integer _asn1EcCoord y):
		nil;;


fun publicKeyFromCertificate certificate =
	match oidHashmapENCRYPTION certificate with 
		OID_rsaEncryption -> rsaKey rsaPublicFromCertificate certificate,
		OID_ecPublicKey   -> ecKey ecPublicFromCertificate certificate;;
