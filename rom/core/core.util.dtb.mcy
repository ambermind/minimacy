/* Copyright (c) 2022, Sylvain Huet, Ambermind
	This program is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License, version 2.0, as
	published by the Free Software Foundation.
	This program is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
	version 2.0, for more details.
	You should have received a copy of the GNU General Public License along
	with this program. If not, see <https://www.gnu.org/licenses/>. */

export dtbDump dtb;;
export dtbFind dtb path;;

const FDT_BEGIN_NODE=1;;
const FDT_END_NODE=2;;
const FDT_PROP=3;;
const FDT_NOP=4;;
const FDT_END=9;;

fun _dtbNameNext dtb i=
	let strCharPos dtb 0 i -> j in
	if j<>nil then (j+1+3)&~3;; // there is always a null

// ----- dump dtb
fun _dtbName dtb i=
	let strCharPos dtb 0 i -> j in
	if j<>nil then strSlice dtb i j-i;;

fun _dtbEnum dtb offStr i prefix=
	if i<>nil && i<strLength dtb then
	let strRead32Msb dtb i -> code in
	let i+4 -> i in
	match code with
		FDT_BEGIN_NODE -> (
			echoLn strFormat "** {" prefix _dtbName dtb i;
			let _dtbEnum dtb offStr (_dtbNameNext dtb i) strConcat prefix "\t" -> i in (
				echoLn strFormat "*}" prefix;
				_dtbEnum dtb offStr i prefix
			)
		),
		FDT_END_NODE -> i,
		FDT_PROP -> 
			let strRead32Msb dtb i -> len in
			let strRead32Msb dtb i+4 -> nameoff in
			let strSlice dtb i+8 len -> val in 
			let (i+8+len+3)&~3 -> next in
			let _dtbName dtb offStr+nameoff -> name in (
				echoLn strFormat "** (*) *" prefix name len hexFromStr val;
				_dtbEnum dtb offStr next prefix
			),
		FDT_NOP -> (
			echoLn strFormat "*nop" prefix;
			_dtbEnum dtb offStr i prefix
		),
		FDT_END -> (
			echoLn "end reached";
			i
		),
		_ -> (
			echoLn strFormat "unknown *" code;
			i
		);;

fun dtbDump dtb=
	let strRead32Msb dtb 0 -> magic in
	if magic==0xD00DFEED then
	let strRead32Msb dtb 8 -> off_dt_struct in
	let strRead32Msb dtb 12 -> off_dt_strings in
	_dtbEnum dtb off_dt_strings off_dt_struct "";
	dtb;;

// ----- find value from path
fun _dtbCheckName dtb i name= (strCheckPos dtb name i)&&(0==strGet dtb i+strLength name);;

fun _dtbExitNode dtb i depth=
	if i<>nil && i<strLength dtb then
	let strRead32Msb dtb i -> code in
	let i+4 -> i in
	match code with
		FDT_BEGIN_NODE -> _dtbExitNode dtb (_dtbNameNext dtb i) depth+1,
		FDT_END_NODE -> if depth<=0 then i else _dtbExitNode dtb i depth-1,
		FDT_PROP -> 
			let strRead32Msb dtb i -> len in
			let (i+8+len+3)&~3 -> next in
			_dtbExitNode dtb next depth,
		FDT_NOP -> _dtbExitNode dtb i depth;;

fun _dtbFind dtb offStrings path i=
	if i<>nil && i<strLength dtb then
	let strRead32Msb dtb i -> code in
	let i+4 -> i in
	match code with
		FDT_BEGIN_NODE -> 
			if (nil<>tail path) && (_dtbCheckName dtb i head path) then
				_dtbFind dtb offStrings (tail path) (_dtbNameNext dtb i)
			else
			let _dtbExitNode dtb (_dtbNameNext dtb i) 0 -> i in
			if i<>nil then _dtbFind dtb offStrings path i,
		FDT_PROP -> 
			let strRead32Msb dtb i -> len in
			let (i+8+len+3)&~3 -> next in
			if nil<>tail path then _dtbFind dtb offStrings path next  // we're still looking for nodes, not props
			else
			let strRead32Msb dtb i+4 -> nameoff in
			if _dtbCheckName dtb offStrings+nameoff (head path) then strSlice dtb i+8 len
			else _dtbFind dtb offStrings path next,
		FDT_NOP -> _dtbFind dtb offStrings path i;;

fun dtbFind dtb path=
	let strRead32Msb dtb 0 -> magic in
	if magic==0xD00DFEED then
	let strRead32Msb dtb 8 -> off_dt_struct in
	let strRead32Msb dtb 12 -> off_dt_strings in
	_dtbFind dtb off_dt_strings (strSplit "/" path) off_dt_struct;;
