/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

fun hexBytesDump s=
	let lambda n i = let hexFromInt i -> s in strConcat (strCreate n-(strLength s) '0') s -> intToHexN in
	for i=0;i<bytesLength s;i+16 do
	(
		echo call intToHexN 8 i;
		for j=0;j<16 do let bytesGet s i+j -> a in echo [" " if a==nil then "  " else call intToHexN 2 a];
		echo "  ";
		for j=0;j<16 do let bytesGet s i+j -> a in echo match a with
			nil -> " ",
			a -> if a<32 then "." else strFromChar a;
		echoLn ""
	);
	s;;
const SECTOR_SIZE=512;;

struct Partition=[
	fReadP fWriteP
	fatTypeP volumeLabelP bytesPerSectorP sectorsPerClusterP bytesPerClusterP numberOfFatsP sectorsPerFatP
	reservedSectorsP rootDirClusterP dataStartP maxClusterP
	cacheFatP cacheDataP cacheDirP oldClusters0P
	lockP
];;
sum FatType=fat32;;

struct FileFat= File+[partitionF cluster0F positionF clusterF entryClusterF entryOffsetF];;

struct DirFile=[name83DF fullNameDF lowerCaseDF sizeDF clusterDF attrDF creationDF updateDF
	vFatClusterDF vFatOffsetDF entryClusterDF entryOffsetDF];;

const FAT_ATTR_VOL =0x08;;
const FAT_ATTR_DIR =0x10;;
const FAT_ATTR_FILE=0x20;;

const FAT_EOC= 0xFFFFFFF;;	// end of chain

const CACHE_LOG_FAT=10;;
const CACHE_MAX_FAT=(1<<CACHE_LOG_FAT)*16;;	// max number of sectors in cache (LOG=10 -> 16k*512b = 8Mo, ie 1M fat values)
const CACHE_LOG_DIR=10;;
const CACHE_MAX_DIR=(1<<CACHE_LOG_DIR)*16;;	// max number of clusters in cache (LOG=10 -> 16k*2kb = 32Mo, ie 1M file entries)
const CACHE_LOG_DATA=5;;
const CACHE_MAX_DATA=(1<<CACHE_LOG_DATA)*16;;	// max number of clusters in cache (LOG=5 -> 512*2kb = 1Mo)

fun cacheFatCheck p =	if CACHE_MAX_FAT<=hashmapCount p.cacheFatP then set p.cacheFatP= hashmapCreate CACHE_LOG_FAT;;
fun cacheFatGet p sector = hashmapGet p.cacheFatP sector;;
fun cacheFatSet p sector data= hashmapSet p.cacheFatP sector data;;

fun cacheDataCheck p = if CACHE_MAX_DATA<=hashmapCount p.cacheDataP then set p.cacheDataP= hashmapCreate CACHE_LOG_DATA;;
fun cacheDataGet p cluster = hashmapGet p.cacheDataP cluster;;
fun cacheDataSet p cluster data= hashmapSet p.cacheDataP cluster data;;

fun cacheDirCheck p = if CACHE_MAX_DIR<=hashmapCount p.cacheDirP then set p.cacheDirP= hashmapCreate CACHE_LOG_DIR;;
fun cacheDirGet p cluster = hashmapGet p.cacheDirP cluster;;
fun cacheDirSet p cluster data= hashmapSet p.cacheDirP cluster data;;

fun cacheCheck p= cacheFatCheck p; cacheDataCheck p; cacheDirCheck p;;


fun _writeRequired mode = mode==FILE_APPEND || mode==FILE_READ_WRITE || mode==FILE_REWRITE;;

fun _searchFile lFiles fullName=
	let strLowercase fullName -> fullName in listFind lFiles (lambda d= d.lowerCaseDF==fullName);;

fun _intParser src i l=
	if l<>nil then let head l -> len in
	let match len with
		1 -> bytesGet src i,
		2 -> bytesRead16Lsb src i,
		3 -> bytesRead24Lsb src i,
		4 -> bytesRead32Lsb src i,
		8 -> (bytesRead32Lsb src i)+((bytesRead32Lsb src i+4)<<32)
	-> val in val:_intParser src i+len tail l;;
	
fun _bytesParser src i l=
	if l<>nil then let head l -> len in
	(bytesSliceOfStr src i len):_bytesParser src i+len tail l;;

fun _fatLongNameExtract data i=
	strFormat "***" (bytesSlice data i+1 10) (bytesSlice data i+14 12) (bytesSlice data i+28 4);;
	
fun _fullNameFilter data=
	let strCharPos data 0 0 -> i in
	if i==nil then data else strLeft data i;;

fun _shortNameFilter name ext ntCase =
	//read https://en.wikipedia.org/wiki/8.3_filename#Compatibility
	let if bitTest ntCase 0x08 then strLowercase name else name -> name in
	let if bitTest ntCase 0x10 then strLowercase ext else ext -> ext in
	if ext=="   " then trim name
	else strFormat "*.*" (trim name) (trim ext);;

fun _timeFromFat data=
	let 2*(data&31) -> s in
	let 63&(data>>5) -> m in
	let 31&(data>>11) -> h in
	let 31&(data>>16) -> day in
	let 15&(data>>21) -> month in
	let 1980+ 127&(data>>25) -> year in
	(timeFromDate year month day h m s)-3600;;

fun _fatFromTime t=
	let max t 315532800 -> t in	// no date before 1980/01/01
	let date t+3600 -> [year month day _ h m s] in
	(s/2) +
	(m<<5) +
	(h<<11) +
	(day<<16) +
	(month<<21) +
	(year-1980)<<25;;

const FILENAME_FILTER= arrayInit 128 (lambda i= i>=32 && nil==strCharPos "\\/:*?\"<>|" i 0);;

fun __fileNameCheckLoop name i=
	if i>=strLength name then true
	else (FILENAME_FILTER.(strGet name i))&& __fileNameCheckLoop name i+1;;

fun _fileNameCheck name= (strLength name)>0 && (strLength name)<=256 && __fileNameCheckLoop name 0;;
	
fun _checksum83 name83=
	let 0->s in for i=0;i<11 do set s= 255 & ((s>>1)+((s&1)<<7)+(strGet name83 i));;

//--- these functions aim to generate a unique 8+3 file name
fun _filter83 i name=
	if i<strLength name then
	let strGet name i -> c in
	(if c<32 || c>126 then "-" else strFromChar c):_filter83 i+1 name;;

fun __check83name name ext lFiles =
	let strConcat name ext -> name83 in
	if nil==listFind lFiles (lambda d= d.name83DF==name83) then name83;;

fun __make83loop name ext lFiles i=
	let strFormat "~*" i -> suffix in
	let strLeft name (8-strLength suffix) -> prefix in
	let __check83name (strConcat prefix suffix) ext lFiles -> name83 in	// returns nil if already use
	if name83<>nil then name83 else __make83loop name ext lFiles i+1;;

fun _make83Name fullName lFiles=
	if fullName=="." then ".          "
	else if fullName==".." then "..          "
	else let strCharPosRev fullName '.' nil -> i in
	let if i==nil then [fullName ""] else [(strLeft fullName i) (strSlice fullName i+1 nil)] -> [name0 ext] in
	let strBuild _filter83 0 strUppercase strLeft (strConcat name0 "        ") 8 -> name in	// name has exactly 8 characters
	let strBuild _filter83 0 strUppercase strLeft (strConcat ext "   ") 3 -> ext in	// ext has exactly 3 characters
	if (strLength name0)>8 then __make83loop name ext lFiles 1	// we always add "~*" when name has more than 8 chars
	else
	let __check83name name ext lFiles -> name83 in	// returns nil if already use
	if name83<>nil then name83 else __make83loop name ext lFiles 1;;

//--- make dir blocks
fun __makeFullNameBlocks name16 chksum i=
	if i<strLength name16 then
	(strBuild [
		(strFromChar (i/26)+1+if i+26 >= strLength name16 then 0x40)
		(strSlice name16 i 10)
		"\$0f\0"
		chksum
		(strSlice name16 i+10 12)
		"\0\0"
		(strSlice name16 i+22 4)
	]):__makeFullNameBlocks name16 chksum i+26;;

fun __makeMainBlock name83 attr tms=
	let _fatFromTime tms/1000 -> t in
	strBuild [
		name83
		(strFromChar attr)
		"\0"	// case
		(strFromChar (tms/10)%200)
		(strInt32Lsb t)
		(strInt16Lsb t>>16)
		"\0\0"	// start cluster (bits 32-63)
		(strInt32Lsb t)
		"\0\0"	// start cluster (bits 0-31)
		"\0\0\0\0"	// length
	];;

fun _makeDirBlocks fullName attr lFiles=
	// this should be called only after fileNameCheck, except for "." or ".." at the creation of a directory
	if _fileNameCheck fullName then
	let _make83Name fullName lFiles -> name83 in
	let strConcat (u16LeFromLatin fullName) "\0\0" -> name16 in
	let strLength name16 -> name16Len in
	let 26*((name16Len+25)/26) -> fullLen in
	let strConcat name16 strCreate fullLen - name16Len 255 -> name16 in	// padding
	let __makeFullNameBlocks name16 (strFromChar _checksum83 name83) 0 -> lBlocks in
	let timeMs -> tms in
	let __makeMainBlock name83 attr tms -> mainBlock in
	[name83 tms/1000 (strListConcat listReverse mainBlock:lBlocks)];;

fun fileNameCheck fullName lFiles =
	fullName<>"." && fullName<>".." && (_fileNameCheck fullName) && (nil==_searchFile lFiles fullName);;




// https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system#Special_entries
// first two clusters are not allocated, their corresponding value in the FAT table has special meaning
// therefore we use (cluster-2) as the real cluster index
fun _readCluster p cluster=
//	echoLn strFormat ">> read cluster *" cluster;
	call p.fReadP p.dataStartP+(cluster-2)*p.sectorsPerClusterP p.sectorsPerClusterP;;
fun _saveCluster p cluster data=
//	echoLn strFormat ">> save cluster *" cluster; dump
	call p.fWriteP p.dataStartP+(cluster-2)*p.sectorsPerClusterP data 0 p.sectorsPerClusterP;;
fun _nextCluster p cluster= _fatGet p cluster;;
fun _validCluster cluster = cluster>1 && cluster<0x0ffffff8;;


fun _readDataCluster p cluster=
	let cacheDataGet p cluster -> data in 
	if data<>nil then data
	else cacheDataSet p cluster _readCluster p cluster;;

fun _saveDataCluster p cluster data=
	_saveCluster p cluster cacheDataSet p cluster data;;

fun _readDirCluster p cluster=
	let cacheDirGet p cluster -> data in 
	if data<>nil then data
	else cacheDirSet p cluster _readCluster p cluster;;

fun _saveDirCluster p cluster data=
	_saveCluster p cluster cacheDirSet p cluster data;;

//--- FAT

fun _fatSector cluster= cluster*4/SECTOR_SIZE;;	// 4 because fat32 use 32 bits values in the fat

fun _fatLocate p cluster=
	let _fatSector cluster -> sector in
	let (cluster*4)%SECTOR_SIZE -> offset in	// 4 because fat32 use 32 bits values in the fat
	let cacheFatGet p sector -> data in 
	let if data<>nil then data else cacheFatSet p sector call p.fReadP p.reservedSectorsP+sector 1 -> data in
	[sector offset data];;

fun _fatGet p cluster=
	let _fatLocate p cluster -> [sector offset data] in 0x0fffffff & bytesRead32Lsb data offset;;

fun _fatSet p cluster value=
	let _fatLocate p cluster -> [sector offset data] in (
		bytesWrite32Lsb data offset (0x0fffffff&value)|(0xf0000000 & bytesRead32Lsb data offset);
		cluster
	);;

fun _fatFlush p cluster=
//echoLn strFormat ">> flush flat cluster *" cluster;
	if cluster<>0 then
	let _fatLocate p cluster -> [sector offset data] in 
	for i=0;i<p.numberOfFatsP do
		let p.reservedSectorsP + i*p.sectorsPerFatP -> fatStart in
		call p.fWriteP fatStart+sector data 0 1;;

// chainCluster is the last claimed cluster, or 0 if no cluster already claimed
fun __fatClaimLoop p cluster n chainCluster =
	if n<=0 then (_fatFlush p (_fatSet p chainCluster FAT_EOC); nil)
	else
	if cluster<p.maxClusterP then	// as we started from cluster 2, we don't need to loop
	if (0 <> _fatGet p cluster) || (chainCluster==0 && hashsetContains p.oldClusters0P cluster) then __fatClaimLoop p cluster+1 n chainCluster
	else (
		if chainCluster<>0 then (
			_fatSet p chainCluster cluster;
			if ((_fatSector cluster)<>(_fatSector chainCluster)) then _fatFlush p chainCluster
		);
		cluster:__fatClaimLoop p cluster+1 n-1 cluster
	);;

// claim n clusters and chain them with cluster0 in the fat
fun _fatClaim p cluster0 n=
//	echoLn strFormat "fatClaim * *" cluster0 n; dump
	let __fatClaimLoop p 2 n cluster0 -> lClusters in	// 2 because first two clusters does not exist
	if (listLength lClusters)==n then lClusters
	else (	// disk is full, couldn't find n clusters, so we liberate the uncomplete list and return nil
		_fatFree p head lClusters;
		nil
	);;

// free a cluster and all its chain. Works also when cluster=0
fun _fatFree p cluster= 
	if _validCluster cluster then
	let _fatGet p cluster -> next in (
		_fatSet p cluster 0;
//		echoLn strFormat ">> free cluster *" cluster;
		if ((_fatSector next)<>(_fatSector cluster)) then _fatFlush p cluster;
		_fatFree p next
	);;

fun _fatFreeFullChain p cluster =
	hashsetAdd p.oldClusters0P cluster;	// we won't use this cluster again as a file's first cluster to prevent issues in concurrent file access
	_fatFree p cluster;;

//---------------------------------------------------
fun isDirectory d= bitTest 16 d.attrDF;;
fun isVolumeName d= bitTest 8 d.attrDF;;

fun _parseDirectory p cluster data vFat i=
//echoLn strFormat "_parseDirectory * * * *" cluster data<>nil vFat i;
	if _validCluster cluster then
	if data==nil then (
		let _readDirCluster p cluster -> data in
		if data<>nil then _parseDirectory p cluster data vFat 0
	)
	else
	if i>=bytesLength data then _parseDirectory p (_nextCluster p cluster) nil vFat 0
	else
	if 0<>bytesGet data i then
	let _bytesParser data i 8:3:nil -> name:ext:_ in
	let _intParser data i+11 1:1:1:4:2:2:4:2:4:nil -> attr:ntCase:hundredths:creation:access:clusterHigh:update:clusterLow:size:_ in
	if (strGet name 0)==0xE5 then _parseDirectory p cluster data nil i+32
	else if attr==0xF then (
		if bitTest 0x40 (strGet name 0) then _parseDirectory p cluster data [cluster i (_fatLongNameExtract data i)] i+32
		else if vFat==nil then _parseDirectory p cluster data nil i+32
		else let vFat -> [vFatCluster vFatOffset vFatLongName] in
		_parseDirectory p cluster data [vFatCluster vFatOffset (strConcat (_fatLongNameExtract data i) vFatLongName)] i+32
	)
	else 
	let (clusterHigh<<16)+clusterLow -> cluster0 in
	let vFat -> [vFatCluster vFatOffset vFatLongName] in
	let if vFatLongName<>nil then _fullNameFilter latinFromU16Le vFatLongName
		else _shortNameFilter name ext ntCase
	-> fullName in
	let bitTest 16 attr -> directory in
	if directory&& (fullName=="." || fullName=="..") then _parseDirectory p cluster data nil i+32
	else
	let (hundredths/100)+(_timeFromFat creation) -> creation in	// creation field has a resolution of 2 seconds, hundredths is from 0 to 200 
	let _timeFromFat update -> update in
	let strConcat name ext -> name83 in
	[
		name83DF= name83
		fullNameDF=fullName lowerCaseDF=strLowercase fullName
		sizeDF=size clusterDF=cluster0 attrDF=attr creationDF=creation updateDF=update
		entryClusterDF=cluster entryOffsetDF=i
		vFatClusterDF=vFatCluster vFatOffsetDF=vFatOffset
		
	]:_parseDirectory p cluster data nil i+32;;

fun _dirFromPath p cluster mkDir path i=
//	echoLn strFormat "_dirFromPath * * *" cluster path i;
	if i==0 && '/'==strGet path 0 then _dirFromPath p cluster mkDir path 1	// we ignore the first slash
	else
	let _parseDirectory p cluster nil nil 0 -> lFiles in
	let strCharPos path '/' i -> j in
	if j==nil then [cluster lFiles (strSlice path i nil)]
	else
	let strSlice path i j-i -> dirName in
	let _searchFile lFiles dirName -> file in
	if file<>nil then _dirFromPath p file.clusterDF mkDir path j+1
	else if mkDir then
	let _dirAddFile p cluster dirName FAT_ATTR_DIR lFiles -> d in
	let head _fatClaim p 0 1 -> newDirCluster in
	let _readDirCluster p d.entryClusterDF -> dirData in
	let timeMs -> tms in
	let bytesBuild [
		(__makeMainBlock ".          " FAT_ATTR_DIR tms)
		(__makeMainBlock "..         " FAT_ATTR_DIR tms)
	] -> defaultDirs in
	let bytesBuild [defaultDirs bytesCreate p.bytesPerClusterP-(bytesLength defaultDirs) 0] -> newDirContent in
	(
//		echoLn "newDirContent"; hexBytesDump newDirContent;
		_saveDirCluster p newDirCluster newDirContent;
		bytesWrite16Lsb dirData d.entryOffsetDF+0x14 newDirCluster>>16;
		bytesWrite16Lsb dirData d.entryOffsetDF+0x1a newDirCluster;
		_saveDirCluster p d.entryClusterDF dirData;
		_dirFromPath p newDirCluster mkDir path j+1
	);;

fun _partitionLocate p path=
	let _dirFromPath p p.rootDirClusterP false path 0 -> [cluster lFiles fileName] in
	_searchFile lFiles fileName;;

fun _partitionDir p path=
	let _dirFromPath p p.rootDirClusterP false path 0 -> [cluster lFiles fileName] in
	lFiles;;

//---------------------------------------------------
fun _clusterForward file cluster n=
	if _validCluster cluster then
	if n<=0 then set file.clusterF=cluster
	else _clusterForward file (_nextCluster file.partitionF cluster) n-1;;

fun _fileSeek f seek=
	if seek==nil then true
	else
	if seek==0 then (
		set f.positionF=-1;
		set f.clusterF=0;
		true
	)
	else
	if seek>0 && seek<=(_fileLength f) then	// We assume we cannot write outside the current file
	let seek-1 -> seek in	// position is expected to point to the last read/written byte
	let if f.positionF<0 then -1 else f.positionF/f.partitionF.bytesPerClusterP -> clusterOrdCurrent in
	let seek/f.partitionF.bytesPerClusterP -> clusterOrdNext in
	let
		if clusterOrdNext==clusterOrdCurrent then clusterOrdNext
		else if clusterOrdNext<clusterOrdCurrent || clusterOrdCurrent<0 then _clusterForward f f.cluster0F clusterOrdNext
		else _clusterForward f f.clusterF clusterOrdNext-clusterOrdCurrent
	-> cluster in
	if cluster<>nil then (
		set f.positionF=seek;
		true
	);;


fun __fileAppendLoop f src start len lClusters =
	if lClusters<>nil then 
	let f.partitionF -> p in (
		set f.clusterF = head lClusters;
		if f.cluster0F==0 then set f.cluster0F=f.clusterF;
		let bytesCreate p.bytesPerClusterP 0 -> data in (
			bytesCopy data 0 src start len;
			_saveDataCluster p f.clusterF data;
		);
		__fileAppendLoop f src start+p.bytesPerClusterP len-p.bytesPerClusterP tail lClusters
	);;

fun _fileAppendClusters f src start len=
	if len>0 then
	let f.partitionF -> p in
	let (len+ p.bytesPerClusterP -1)/p.bytesPerClusterP -> clustersToClaim in
	let _fatClaim p f.clusterF clustersToClaim -> lClusters in
	__fileAppendLoop f src start len lClusters;;

fun _fileOverWrite f position src start len=	// when writing, we start to overwrite from the position to the end of last file's cluster, then append data
	if len>0 then
	let f.partitionF -> p in
	let (position + p.bytesPerClusterP) % p.bytesPerClusterP -> currentOffset in	// makes sure that position==-1 leads to currentOffset=bytesPerCluster-1
	let p.bytesPerClusterP-1-currentOffset -> clusterRemaining in
	let if position<0 then f.cluster0F else _nextCluster p f.clusterF -> nextCluster in
	if clusterRemaining<=0 && !_validCluster nextCluster then _fileAppendClusters f src start len
	else
	(
		if clusterRemaining<=0 then (
			set f.clusterF=nextCluster;
			set clusterRemaining=p.bytesPerClusterP;
			set currentOffset=-1;
		);
		let _readDataCluster f.partitionF f.clusterF -> data in
		let min len clusterRemaining -> dataToWrite in (
			bytesCopy data currentOffset+1 src start dataToWrite;
			_saveDataCluster p f.clusterF data;
			_fileOverWrite f position+dataToWrite src start+dataToWrite len-dataToWrite
		)
	);;

fun _fileLength f=
	let _readDirCluster f.partitionF f.entryClusterF -> dirData in
	bytesRead32Lsb dirData f.entryOffsetF+0x1c;;

fun _fileWrite f src start len=
//	echoLn strFormat "write * @*: * bytes" src start len;
	let f.partitionF -> p in
	let f.cluster0F -> prevCluster0 in
	let _readDirCluster p f.entryClusterF -> dirData in (
		_fileOverWrite f f.positionF src start len;
		set f.positionF=f.positionF+len;
		if prevCluster0==0 then (
			bytesWrite16Lsb dirData f.entryOffsetF+0x14 f.cluster0F>>16;
			bytesWrite16Lsb dirData f.entryOffsetF+0x1a f.cluster0F;
		);
		bytesWrite32Lsb dirData f.entryOffsetF+0x16 _fatFromTime time;
		bytesWrite32Lsb dirData f.entryOffsetF+0x1c max (_fileLength f) f.positionF+1;
		_saveDirCluster p f.entryClusterF dirData;
		len
	);;

fun _fileRead f len=
	if len>0 then
	let f.partitionF -> p in
	let (f.positionF + p.bytesPerClusterP) % p.bytesPerClusterP -> currentOffset in	// makes sure that position==-1 leads to currentOffset=bytesPerCluster-1
	let p.bytesPerClusterP-1-currentOffset -> clusterRemaining in
	(
		if clusterRemaining<=0 then (
			set f.clusterF=if f.positionF<0 then f.cluster0F else _nextCluster p f.clusterF;	// f.clusterF cannot be zero as len=0 for empty files
			set clusterRemaining=p.bytesPerClusterP;
			set currentOffset=-1;
		);
		let _readDataCluster f.partitionF f.clusterF -> data in
		let min len clusterRemaining -> dataToRead in
		let bytesSliceOfStr data currentOffset+1 dataToRead -> fragment in
		(
			set f.positionF= f.positionF+dataToRead;
			fragment:_fileRead f len-dataToRead
		)
	);;


fun _freeEntry data i= let bytesGet data i -> v in v==0 || v==0xe5;;

fun _dirAddEntriesFinal p entries cluster data prevCluster prevData i=	// i is just after the final entryBlock
	let strLength entries -> entriesLen in
	let min entriesLen i -> lenInThisCluster in
	(
//		echoLn strFormat "_dirAddEntriesFinal * * * *" entriesLen cluster prevCluster i; 
		bytesCopy data i-lenInThisCluster entries entriesLen-lenInThisCluster lenInThisCluster;
		_saveDirCluster p cluster data;
		if lenInThisCluster<entriesLen then
		let entriesLen-lenInThisCluster -> remainingLen in (
			bytesCopy prevData (bytesLength prevData)-remainingLen entries 0 remainingLen;
			_saveDirCluster p prevCluster prevData;
		);
		[cluster i-32]
	);;

fun _dirNextOrNewCluster p cluster=
	let _nextCluster p cluster -> next in
	if _validCluster next then next
	else
	let head _fatClaim p cluster 1 -> next in
	let bytesCreate p.bytesPerClusterP 0 -> dirEmptyData in
	(
		_saveDirCluster p next dirEmptyData;
		next
	);;

fun _dirAddEntries p entries remainingEntries cluster data prevCluster prevData i=
	if _validCluster cluster then
	if remainingEntries==0 then _dirAddEntriesFinal p entries cluster data prevCluster prevData i
	else
	if data==nil then (
		let _readDirCluster p cluster -> data in
		if data<>nil then _dirAddEntries p entries remainingEntries cluster data prevCluster prevData 0
	)
	else
	if i>=bytesLength data then _dirAddEntries p entries remainingEntries (_dirNextOrNewCluster p cluster) nil cluster data 0
	else if !_freeEntry data i then _dirAddEntries p entries (strLength entries) cluster data nil nil i+32
	else _dirAddEntries p entries remainingEntries-32 cluster data prevCluster prevData i+32;;

fun _dirAddFile p cluster fileName attr lFiles=
	if fileNameCheck fileName lFiles then
	let _makeDirBlocks fileName attr lFiles -> [name83 t entries] in
	let strLength entries -> remainingEntries in
	let _dirAddEntries p entries remainingEntries cluster nil nil nil 0 -> [cluster offset] in
	if cluster<>nil then [
		name83DF=name83
		fullNameDF=fileName sizeDF=0 clusterDF=0 attrDF=attr creationDF=t updateDF=t
		entryClusterDF=cluster entryOffsetDF=offset
	];;

fun _createFile p path mode =
	let _dirFromPath p p.rootDirClusterP true path 0 -> [cluster lFiles fileName] in
	if cluster<>nil then
	let _dirAddFile p cluster fileName FAT_ATTR_FILE lFiles -> d in
	if d<>nil then
	_openFile p d if mode==FILE_REWRITE then FILE_READ_WRITE else mode;;

fun _checkFile f=
	cacheCheck f.partitionF;
	if f.partitionF<>nil then
	let _readDirCluster f.partitionF f.entryClusterF -> dirData in
	let bytesRead16Lsb dirData f.entryOffsetF+0x14 -> clusterHigh in
	let bytesRead16Lsb dirData f.entryOffsetF+0x1a -> clusterLow in
	let (clusterHigh<<16)+clusterLow -> cluster0 in
	if cluster0==f.cluster0F then true
	else (
		set f.partitionF=nil;
		false
	);;

fun _openFile p d mode =
	let [
		partitionF=p
		cluster0F=d.clusterDF
		positionF= -1
		clusterF=0
		entryClusterF=d.entryClusterDF
		entryOffsetF=d.entryOffsetDF
		closeF= (lambda = nil)
	] -> f in (
		set f.sizeF= (lambda = lockSync p.lockP (lambda =
			if _checkFile f then _fileLength f
		));
		set f.tellF= (lambda = if _checkFile f then f.positionF);
		set f.readF= (lambda seek len = lockSync p.lockP (lambda =
//			echoLn strFormat "read <*> <*>" seek len;
			if _checkFile f then 
			if _fileSeek f seek then
			let _fileLength f -> fileLen in
			strListConcat _fileRead f (min len fileLen-f.positionF)
		));
		set f.writeF= if _writeRequired mode then (lambda seek src start len = lockSync p.lockP (lambda =
			if _checkFile f then 
			if _fileSeek f seek then
			if start>=0 then
			let if len==nil then strLength src else len -> len in
			let min start+len strLength src -> end in
			let end-start -> len in
			_fileWrite f src start len
		));
		set f.closeF= (lambda =
			set f.partitionF=nil;
			nil
		);
		if mode==FILE_REWRITE then
			let _readDirCluster p f.entryClusterF -> dirData in (
				_fatFreeFullChain p f.cluster0F;
				set f.cluster0F= set f.clusterF=0;
				bytesWrite32Lsb dirData f.entryOffsetF+0x16 _fatFromTime time;
				bytesWrite32Lsb dirData f.entryOffsetF+0x1c 0;
				_saveDirCluster p f.entryClusterF dirData
			);
		if mode==FILE_APPEND then _fileSeek f (_fileLength f);

		File<f
	);;

fun _deleteFile p d=
	if d.fullNameDF<>"." && d.fullNameDF<>".." then (
		if d.vFatClusterDF==d.entryClusterDF then
			let _readDirCluster p d.entryClusterDF -> dirData in
			(
				for i=d.vFatOffsetDF;i<=d.entryOffsetDF;i+32 do
					bytesSet dirData i 0xe5;
				_saveDirCluster p d.entryClusterDF dirData
			)
		else
			let _readDirCluster p d.vFatClusterDF -> vFatData in
			let _readDirCluster p d.entryClusterDF -> dirData in
			(
				for i=d.vFatOffsetDF;i<bytesLength vFatData;i+32 do
					bytesSet vFatData i 0xe5;
				_saveDirCluster p d.vFatClusterDF vFatData;
				for i=0;i<=d.entryOffsetDF;i+32 do
					bytesSet dirData i 0xe5;
				_saveDirCluster p d.entryClusterDF dirData;
			);
		_fatFreeFullChain p d.clusterDF;
		true;
	);;
	
//---------------------------------------------------

// see https://en.wikipedia.org/wiki/BIOS_parameter_block
const BOOT_FIELDS_FAT32=
	3:8:					//   0 - 0x0b : jump+origin
	2:1:2:1:2:2:1:2:		//0x0b - 0x18 : DOS 2.0 BPB	(BPB=BIOS Parameter Block)
	2:2:4:4: 				//0x18 - 0x24 : DOS 3.31 BPB
	4:2:2:4:2:2:12:1:1:1:4:	//0x24 - 0x47 : DOS 7.1 EBPB		
	nil;;

fun _partitionInitFat32 bootSector partitionStart fRead fWrite=
	let _intParser bootSector 0 BOOT_FIELDS_FAT32 -> 
		jmp:_:bytesPerSector:sectorsPerCluster:reservedSectors:	// 0x00 - 0x10
		numberOfFats:rootDirEntries:_:mediaDescriptor:_:	// 0x10 - 0x18
		sectorsPerTrack:numberOfHeads:hiddenSectors:largeTotalSector:	// 0x18-0x24
		sectorsPerFat:mirroringFlag:version:rootDirCluster:		// 0x24-0x30
		fsInfoSector:backupSector:bootFileName:physDriveNumber:flags:extendedBootSign:volumeSerialNumber:_ in		// 0x30-0x47
	let trim bytesSliceOfStr bootSector 0x47 11 -> volumeLabel in
	let sectorsPerFat*numberOfFats+reservedSectors -> dataStart in
	let (largeTotalSector - dataStart)/sectorsPerCluster +2 -> maxCluster in
	let [
		fatTypeP=fat32 volumeLabelP=volumeLabel bytesPerSectorP=bytesPerSector sectorsPerClusterP=sectorsPerCluster bytesPerClusterP=bytesPerSector*sectorsPerCluster
		numberOfFatsP=numberOfFats sectorsPerFatP=sectorsPerFat
		reservedSectorsP=reservedSectors dataStartP=dataStart maxClusterP=maxCluster
		rootDirClusterP=rootDirCluster
		oldClusters0P= (hashsetCreate 10)
		cacheFatP= (hashmapCreate CACHE_LOG_FAT)
		cacheDataP= (hashmapCreate CACHE_LOG_DATA)
		cacheDirP= (hashmapCreate CACHE_LOG_DIR)
		lockP=lockCreate
	] -> p in (
		set p.fReadP= (lambda sector nbSectors = call fRead partitionStart+sector nbSectors);
		set p.fWriteP= (lambda sector data offset nbSectors=
			(nbSectors*bytesPerSector)==call fWrite partitionStart+sector data offset nbSectors
		);
		let listFind (_partitionDir p "") (lambda d= isVolumeName d) -> d in
		if d<>nil then set p.volumeLabelP=d.fullNameDF;
		echoLn strFormat "-> found fat32 partition (*): *" (intAbbrev 1024 largeTotalSector*bytesPerSector) p.volumeLabelP;
		p:nil
	);;

const BOOT_FIELDS_EFI=
	8:4:4:4:4:
	8:8:8:8:16:
	8:4:4:4:
	nil;;

fun _partitionEfiLoop fRead fWrite partitionData partitionCount partitionSize i=
	if i<partitionCount then
	let bytesSlice partitionData i*partitionSize partitionSize -> data in
	let _intParser data 32 8:8:8:nil -> 
		firstLba:lastLba:attributes:_ in
	let if firstLba<>0 then (
//		hexDump data;
//		dump firstLba:lastLba:attributes:nil;
		_partitionInit fRead fWrite firstLba lastLba+1-firstLba
	 ) -> p in
	listConcat p _partitionEfiLoop fRead fWrite partitionData partitionCount partitionSize i+1;;

fun _partitionInitEFI fRead fWrite bootSector=
	echoLn strFormat "-> found EFI partitioning";
	let _intParser bootSector 0 BOOT_FIELDS_EFI -> 
		_:revision:headerSize:headerCrc32:_:
		currentLba:backupLba:firstUsableLba:lastUsableLba:_:
		partitionListLba:partitionCount:partitionSize:partitionCrc:_ in
	let call fRead partitionListLba (partitionCount*partitionSize+SECTOR_SIZE-1)/SECTOR_SIZE -> partitionData in
	_partitionEfiLoop fRead fWrite partitionData partitionCount partitionSize 0;;

fun _partitionInit fRead fWrite partitionStart partitionLength=
	let call fRead partitionStart 1 -> bootSector in
	if partitionStart==1 && (bytesSliceOfStr bootSector 0 8)=="EFI PART" then _partitionInitEFI fRead fWrite bootSector
	else
	let bytesRead16Lsb bootSector 510 -> magic in
	if magic==0xaa55 then
	if (bytesSliceOfStr bootSector 0x52 8)== "FAT32   " then _partitionInitFat32 bootSector partitionStart fRead fWrite;;

fun storageInit fRead fWrite=
	let call fRead 0 1 -> mbr in
	let bytesRead16Lsb mbr 510 -> magic in
	if magic==0xaa55 then
	if (bytesSliceOfStr mbr 0x36 3)=="FAT" || (bytesSliceOfStr mbr 0x52 3)=="FAT" then (	// only one partition
		_partitionInit fRead fWrite 0 nil
	)
	else listReduce 0:1:2:3:nil nil (lambda result number =
		let 0x01BE+number*16 -> offset in
		let bytesRead32Lsb mbr offset+8 -> partitionStart in
		let bytesRead32Lsb mbr offset+12 -> partitionLength in
		if partitionStart<>0 && partitionLength<>0 then (
			echoLn strFormat "> check partition *" number;
			let _partitionInit fRead fWrite partitionStart partitionLength -> partition in
			if partition<>nil then listConcat partition result
			else (
				echoLn "-> partition not supported";
				result
			)
		)
		else result
	);;

fun _mkPartition p name index writable mount root = 
[
	nameP=name
	typeP=sdVolume
	indexP=index
	writableP=writable
	mountP=mount
	rootP=root
	openP=(lambda path mode = lockSync p.lockP (lambda =
		cacheCheck p;
		if (!_writeRequired mode) || writable then 
		let _partitionLocate p path -> d in
		if d==nil && _writeRequired mode then _createFile p path mode
		else if !isDirectory d then	_openFile p d mode
	))
	diskListP= (lambda output path= lockSync p.lockP (lambda =
		cacheCheck p;
		let _partitionDir p path -> lFiles in
		for d in lFiles do if !isVolumeName d then bufferAppend output strFormat "*\0* * *\0"
			d.fullNameDF (hexFromInt d.sizeDF) (hexFromInt d.updateDF) (if isDirectory d then "d" else "-");
		0
	))
	fileDeleteP=(lambda path= lockSync p.lockP (lambda =
		cacheCheck p;
		if writable then 
		let _partitionLocate p path -> d in
		if d<>nil then _deleteFile p d
	))
];;

fun storageMount volumeType fRead fWrite writable mount root=
	let storageInit fRead fWrite -> partitions in
	let 0->index in
	for p in listReverse partitions do (
		volumeCreate p.volumeLabelP volumeType index writable;
		partitionAdd _mkPartition p p.volumeLabelP index writable mount root;
		set index=index+1
	);;

//------------------------------------------------------------------------------------

//#ifndef storageRead

////------------ simulated sd card reader
//const SRC="sdpi3.img";;
////const SRC="hdimage.gpt";;
//const Data=bytesFromStr load SRC;;

//fun storageRead id buffer offset sector nbSectors= 
////	echoLn strFormat "======read * sectors from * (*)" nbSectors start (hexFromInt start*SECTOR_SIZE);
//	let nbSectors*SECTOR_SIZE -> len in
//	if offset>=0 && offset+len<=bytesLength buffer then
//	if sector>=0 && (sector*SECTOR_SIZE+len)<=bytesLength Data then (
//		bytesCopyBytes buffer offset Data sector*SECTOR_SIZE nbSectors*SECTOR_SIZE;
//		nbSectors*SECTOR_SIZE
//	);;

//fun storageWrite id buffer offset sector nbSectors= 
////	echoLn strFormat "======read * sectors from * (*)" nbSectors start (hexFromInt start*SECTOR_SIZE);
//	let nbSectors*SECTOR_SIZE -> len in
//	if offset>=0 && offset+len<=bytesLength buffer then
//	if sector>=0 && (sector*SECTOR_SIZE+len)<=bytesLength Data then (
//		bytesCopyBytes Data sector*SECTOR_SIZE buffer offset nbSectors*SECTOR_SIZE;
//		nbSectors*SECTOR_SIZE
//	);;
//#endif	

fun _mkFread fRead id = 
	lambda sector nbSectors=
		let bytesCreate SECTOR_SIZE*nbSectors 0 -> buffer in
		let call fRead id buffer 0 sector nbSectors -> len in
		bytesSlice buffer 0 len;;

fun _mkFwrite fWrite id = 
	lambda sector data offset nbSectors= call fWrite id data offset sector nbSectors;;

extend VolumeType with sdVolume;;

fun sdMount fRead fWrite =
	storageMount sdVolume (_mkFread fRead 0) (_mkFwrite fWrite 0) true "" "/";;


