/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

use core.util.base64;;
use core.crypto.hash;;
use core.crypto.des;;
use core.crypto.block;;

//---- password derivation for pem private key
fun __keyFromPassword src last len= if len>0 then
	let md5Output md5Process (md5Process md5Create last 0 nil) src 0 nil -> result in
	result:__keyFromPassword src result len-strLength result;;
fun _keyFromPassword pwd salt len= strLeft (strListConcat __keyFromPassword (strConcat pwd salt) "" len) len;;

fun _filterPem l headers=
	if l<>nil then let head l->str in
	let strPos str ":" 0 -> i in
	if i<>nil then _filterPem (tail l) [(trim strLeft str i) trim strSlice str i+1 nil]:headers
	else [(listReverse headers) strBuild l];;
fun _pemExtractEnd l=
	if l<>nil then let head l -> str in
	if '-'<>strGet str 0 then str:_pemExtractEnd tail l;;

fun _pemExtract l=
	if l<>nil then let head l -> str in
	let strPos str "-----BEGIN " 0 -> i in
	if i==nil then _pemExtract tail l
	else
	let strReplace (strSlice str 11 nil) "-----" "" -> name in
	let _pemExtractEnd tail l -> lines in
	let _filterPem lines nil -> [headers b64] in
	[name headers b64Decode b64]:_pemExtract tail l;;

fun pemRead str=
	let if strContains str "\r\n" then strReplace str "\r" ""
	else if strContains str "\r" then strReplace str "\r" "\n"
	else str -> str in	// now str has only unix end of line
	let strSplit "\n" str -> lines in
	_pemExtract lines;;

fun _headerValue headers field=
	if headers<>nil then let head headers ->[f val] in if field==f then val else _headerValue (tail headers) field;;

fun _decodeBin pwd headers bin=
	if headers==nil then bin
	else if "4,ENCRYPTED"==_headerValue headers "Proc-Type" then
		let  _headerValue headers "DEK-Info" -> codec in
		let "DES-EDE3-CBC," -> prefix in
		if strStartsWith codec prefix then
			let strFromHex strSlice codec (strLength prefix) 16 -> salt in 
			let _keyFromPassword pwd salt 24 -> keys in
			let des3DecryptCbc keys salt bin -> data in
			strLeft data unPaddingPKCS_5 data;;

fun pemDecode pem pwd=
	if pem<>nil then
	let pemRead pem -> blocks in
	listMap blocks (lambda b= let b -> [name headers der] in
		[name (_decodeBin pwd headers der)]
	);;

fun _cut64 src i= if i<strLength src then (strSlice src i 64):_cut64 src i+64;;

fun pemMake name der=
	strJoin "\n"
		(strFormat "-----BEGIN *-----" name ):
		listConcat (_cut64 (b64Encode der) 0)
		(strFormat "-----END *-----" name ):
		nil;;
