/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

export TlsTcp;;
export tlsTcpOnEvent h onRead onWrite;;
export tlsTcpWrite h data start;;
export tlsTcpClose h;;
export tlsTcpSrvOnAccept12 hostList srv cb;;
export tlsTcpSrvOnAccept hostList srv cb;;
export tlsTcpOpen12 ip port serverName cipherSuites clientCertificate clientKey;;
export tlsTcpOpen ip port serverName cipherSuites clientCertificate clientKey;;
export tlsTcpSetCipherSuites h cipherSuites;;
export tlsTcpGetServerName h;;
export tlsTcpGetClientCertificate h ;;
export tlsTcpNoDelay h noDelay;;
export tlsTcpRemoteIp h;;
export tlsTcpRemotePort h;;



use core.net.tls;;
use core.net.tls12 as tls12;;
use core.net.tls13;;


struct TlsTcp=[tcpTT sendTT iTT closeAfterTT onReadTT onWriteTT tlsTT tls12TT];;

const _DEBUG=false;;

const FORCE_TLS12=false;;

fun _tlsTcpClosed h=
	call h.onReadTT nil;
	set h.onReadTT=nil;
	set h.onWriteTT=nil;
	0;;

fun _tlsTcpSend h data=
//hexDump 
	set h.sendTT=strConcat h.sendTT data;
//	echo "send "; echoLn 
	set h.iTT=tcpWrite h.tcpTT h.sendTT h.iTT;
	if h.iTT>=strLength h.sendTT then (
		if h.closeAfterTT then tcpClose h.tcpTT;
		set h.sendTT=nil;
		set h.iTT=0;
	);
	strLength data;;

fun _tlsReceive h data= match h.tls12TT with
	nil -> tlsReceive h.tlsTT data,
	_   -> tls12.tlsReceive h.tls12TT data;;

fun _tlsClose h= match h.tls12TT with
	nil -> tlsClose h.tlsTT,
	_   -> tls12.tlsClose h.tls12TT;;
fun _tlsSend h data= match h.tls12TT with
	nil -> tlsSend h.tlsTT data,
	_   -> tls12.tlsSend h.tls12TT data;;
fun _tlsStage h= match h.tls12TT with
	nil -> tlsStage h.tlsTT,
	_   -> tls12.tlsStage h.tls12TT;;

fun _tlsTcpManage12 tcp tls req=
	let [tls12TT=tls tcpTT=tcp sendTT=req iTT=0] -> h in
	(
		tls12.tlsOnAlert tls (lambda alert=
			if _DEBUG then echoLn [(tls12.tlsWho tls) "----------ONALERT " hexFromInt alert];
			0
		);
		tls12.tlsOnStage tls (lambda [stage data]=
			if _DEBUG then echoLn [(tls12.tlsWho tls) "----------ONSTAGE " stage];
			match stage with
				STAGE_NEXT -> (
					_tlsTcpSend h data
				),
				STAGE_READY -> (
					_tlsTcpSend h data;
					call h.onWriteTT;
					nil
				),
				STAGE_ERROR -> (
					if _DEBUG then echoLn strFormat "*----------ERROR *: *" (tls12.tlsWho tls) (hexFromInt tls12.tlsAlert tls) data;
					tcpClose h.tcpTT;
					_tlsTcpClosed h;
					nil
				);
			0
		);
		tls12.tlsOnReceive tls (lambda data=
			if _DEBUG then echoLn "----------ONRECEIVE ";
			true&&call h.onReadTT data;
			0
		);
		h
	);;

fun _tlsTcpManage tcp tls req=
	let [tlsTT=tls tcpTT=tcp sendTT=req iTT=0] -> h in
	(
		tlsOnAlert tls (lambda alert=
			if _DEBUG then echoLn [(tlsWho tls) "----------ONALERT " hexFromInt alert];
			0
		);
		tlsOnStage tls (lambda [stage data]=
			if _DEBUG then echoLn [(tlsWho tls) "----------ONSTAGE " stage];
			match stage with
				STAGE_NEXT -> (
					_tlsTcpSend h data
				),
				STAGE_READY -> (
					_tlsTcpSend h data;
					call h.onWriteTT;
					nil
				),
				STAGE_ERROR -> (
					if _DEBUG then echoLn strFormat "*----------ERROR *: *" (tlsWho tls) (hexFromInt tlsAlert tls) data;
					tcpClose h.tcpTT;
					_tlsTcpClosed h;
					nil
				);
			0
		);
		tlsOnReceive tls (lambda data=
			if _DEBUG then echoLn "----------ONRECEIVE ";
			true&&call h.onReadTT data;
			0
		);
		h
	);;

fun tlsTcpOnEvent h onRead onWrite=
	set h.onReadTT=onRead;
	set h.onWriteTT=(lambda = call onWrite; true);
	tcpOnEvent h.tcpTT
		(lambda data=
//			echoLn "<< receive"; hexDump data;
//			echoLn hexFromStr data;
			if data<>nil then _tlsReceive h data
			else
			(
				if _DEBUG then echoLn "----------ONCLOSE";
				_tlsTcpClosed h;
				nil
			)
		)
		(lambda = _tlsTcpSend h nil);;

fun tlsTcpWrite h data start=
	let _tlsStage h -> [stage _] in
	match stage with
		STAGE_READY -> _tlsTcpSend h (_tlsSend h strSlice data start nil),
		_ -> 0;;

fun tlsTcpClose h=
	set h.closeAfterTT=true;
	set h.onReadTT=nil;
	set h.onWriteTT=nil;
	_tlsTcpSend h _tlsClose h;
	true;;

fun tlsTcpSrvOnAccept12 hostList srv cb=
	let tls12.tlsMakeHosts hostList -> hosts in
	tcpSrvOnAccept srv (lambda tcp= 
		let tls12.tlsCreateSrv hosts -> tls in
		let _tlsTcpManage12 tcp tls nil -> tt in
		call cb tt
	);;

fun tlsTcpSrvOnAccept hostList srv cb=
	let tlsMakeHosts hostList -> hosts in
	tcpSrvOnAccept srv (lambda tcp= 
		let tlsCreateSrv hosts -> tls in
		let _tlsTcpManage tcp tls nil -> tt in
		call cb tt
	);;

fun tlsTcpOpen12 ip port serverName cipherSuites clientCertificate clientKey=
//echoTime "tlsTcpOpen";
	let tls12.tlsCreateCli serverName cipherSuites clientCertificate clientKey -> tls in
	let tls12.tlsClientHello tls -> req in
	let tcpOpen ip port -> tcp in
	_tlsTcpManage12 tcp tls req;;

fun tlsTcpOpen ip port serverName cipherSuites clientCertificate clientKey=
//echoTime "tlsTcpOpen";
	if FORCE_TLS12 then tlsTcpOpen12 ip port serverName cipherSuites clientCertificate clientKey
	else
	let tlsCreateCli serverName cipherSuites clientCertificate clientKey -> tls in
	let tlsClientHello tls -> req in
	let tcpOpen ip port -> tcp in
	_tlsTcpManage tcp tls req;;

fun tlsTcpSetCipherSuites h cipherSuites= match h.tls12TT with
	nil -> tlsSetCipherSuites h.tlsTT cipherSuites,
	_   -> tls12.tlsSetCipherSuites h.tls12TT cipherSuites;;
fun tlsTcpGetServerName h= match h.tls12TT with
	nil -> tlsGetServerName h.tlsTT,
	_   -> tls12.tlsGetServerName h.tls12TT;;
fun tlsTcpGetClientCertificate h = match h.tls12TT with
	nil -> tlsGetClientCertificate h.tlsTT,
	_   -> tls12.tlsGetClientCertificate h.tls12TT;;

fun tlsTcpNoDelay h noDelay= tcpNoDelay h.tcpTT noDelay;;
fun tlsTcpRemoteIp h=tcpRemoteIp h.tcpTT;;
fun tlsTcpRemotePort h=tcpRemotePort h.tcpTT;;

