/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

//------------ Admin
fun help=
	echoLn "Minimacy admin commands";
	echoLn "------------------------";
	echoLn "- sys            : system overview (fs, ts, ms, inputs, timers in one command)";
	echoLn "- ts             : threads status";
	echoLn "- ms             : memory status";
	echoLn "- fs             : list of volumes and mounts";
	echoLn "- inputs         : list of active inputs (sockets, keyboard, ...)";
	echoLn "- eth            : list of network interfaces (only on Linux and bare-metal)";
	echoLn "- timers         : list of pending timers";
	echoLn "- kill id        : kill a thread based on its id";
	echoLn "- dir path       : show directory content";
	echoLn "- reboot         : restart the VM";
	echoLn "- gc             : force a full gc";
	echoLn "- pkg            : display the current package";
	echoLn "- pkgList        : display the list of current compiled packages";
	echoLn "- pkgByName name : search a package by its name";
	echoLn "- pkgScope pkg   : display all labels visible from a given package";
	echoLn "- pkgOverload pkg: display all overloaded labels from a given package";
	true;;

fun ms=
	gc;
	let memoryRecount -> totalMem in
	let memoryReserve -> reserve in
	let memoryLargestBlock -> largestBlock in
	let if hostMemory<>nil then memoryFree -> totalFree in
	(
		echoLn "Memory:";
		echoLn "  Size      (bytes)  Package";
		echoLn "  ----      -------  -------";

		let quicksort pkgs (lambda a b= 0>=strCmp (pkgName a) (pkgName b)) -> lPkgs in
		let listMap lPkgs (lambda p = [(pkgName p) (pkgMemory p)]) -> rows in
		let listConcat rows ["TOTAL USED" totalMem]:["(reserve)" reserve]:["(free)" totalFree]:["(total ram = TOTAL USED+reserve+free)" hostMemory]:["(largest free block)" largestBlock]:nil -> rows in
		for [title value] in rows do
			if value<>nil then
			echoLn strFormat "**  *" (strLeftSpacePadding 6 intAbbrev 1024 value) (strLeftSpacePadding 13 strFormat "(*)" value) title;
		echoLn "";
		true
	);;
fun ts=
	echoLn "Threads:";
	let lambda n1 i1 state count start caller=echoLn [(strLeftSpacePadding 16 n1) (strLeftSpacePadding 8 i1) (strLeftSpacePadding 8 state)
		(strLeftSpacePadding 7 count) (strLeftSpacePadding 9 start) " " caller] -> echoFormat in
	(
		call echoFormat "Name" "ID" "State" "Cycles" "Start" "Origin";
		call echoFormat "----" "--" "-----" "------" "-----" "------";
		for th in _threads do
			call echoFormat (threadName th) (decFromInt threadId th) (stateName threadState th)
				(intAbbrev 1000 threadCycles th)
//				(strBuild [(intAbbrev 1024 threadMemory th) (if maxMem>0 then ["/" intAbbrev 1024 maxMem] )])
				(smallDate threadT0 th)
				threadOrigin th;
		echoLn "";
		true
	);;

fun inputs=
	echoLn "Inputs:";
	let lambda type detail id name= echoLn strFormat "*** *"
		(strLeftSpacePadding 10 type)
		(strLeftSpacePadding 21 detail)
		(strLeftSpacePadding 6 id)
		(name)
	-> echoFormat in
	(
		call echoFormat "Type" "Detail" "Id" "Thread";
		call echoFormat "----" "------" "--" "------";
		for s in _StreamList do call s._showS (lambda type detail=
			call echoFormat type detail (decFromInt threadId s._thS) s._thS._nameT
		);
		echoLn "";
		true
	);;

fun eth=		//only for root on Linux
	echoLn " Id      Name Family          MAC Max_packet        IP";
	echoLn " --      ---- ------          --- ----------        --";
	for [index name family mac maxPacketLength ip] in ethList do
		echoLn [
			(strLeftSpacePadding 3 decFromInt index)
			(strLeftSpacePadding 10 name)
			(strLeftSpacePadding 7 decFromInt family)
			(strLeftSpacePadding 13 hexFromStr mac)
			(strLeftSpacePadding 11 decFromInt maxPacketLength)
			" "
			ip
		];
	true;;

fun timers=
	echoLn "Timers:";
	let lambda delay id name=echoLn [(strLeftSpacePadding 12 delay) (strLeftSpacePadding 6 id) " " name] -> echoFormat in
	let _timerList -> lTimers in
	(
		call echoFormat "Wait" "Id" "Thread";
		call echoFormat "----" "--" "------";
		for [t th] in lTimers do call echoFormat (dec3FromInt "," max 0 t-timeMs) (decFromInt threadId th) th._nameT;
		if lTimers==nil then (echoLn "        (no active timer)";nil);
		echoLn "";
		true
	);;

fun volumes=
	echoLn "Volumes:";
	echoLn "    Volume    Access  SectorSize   NbSectors  TotalSize";
	echoLn "    ------    ------  ----------   ---------  ---------";
	for v in _Volumes do echoLn [
		(strLeftSpacePadding 10 v.nameV)
		(strLeftSpacePadding 10 if v.writableV then "writable" else "readonly")
		(strLeftSpacePadding 12 if v.sectorSizeV==nil then "-" else strFromInt v.sectorSizeV)
		(strLeftSpacePadding 12 if v.nbSectorsV==nil then "-" else strFromInt v.nbSectorsV)
		(strLeftSpacePadding 11 
			if v.nbSectorsV==nil then "-" 
			else
			// we complexify the next formula in order to work on 32bits versions, as nbSectors*sectorSize may exceed 2**31:
			let (v.nbSectorsV/(1024*1024))*v.sectorSizeV -> sizeMb in
			if sizeMb==0 then intAbbrev 1024 v.nbSectorsV*v.sectorSizeV
			else intAbbrevExt 1024 (v.nbSectorsV/(1024*1024))*v.sectorSizeV "M":"G":"T":"P":nil
		)
	];
	echoLn "";
	true;;

fun partitions=
	echoLn "Partitions:";
	echoLn "    Volume    Access  Partition";
	echoLn "    ------    ------  ---------";
	for v in _Volumes do
		for p in v.partitionsV do echoLn [
			(strLeftSpacePadding 10 v.nameV)
			(strLeftSpacePadding 10 if p.writableP then "writable" else "readonly")
			"  "
			p.nameP
		];
	echoLn "";
	true;;

fun mounts=
	echoLn "Mounts:";
	let 1+max 7 listReduce _Mounts 0 (lambda mx m= max mx strLength m.mountM) -> mountWidth in
	(
		echoLn [" Id    Volume         Partition    Access" (strLeftSpacePadding mountWidth "Mount") "  Partition Path"];
		echoLn [" --    ------         ---------    ------ " (strCreate mountWidth-1 '-')           "  --------------"];

		for m in _Mounts do
			echoLn [
				(strLeftSpacePadding 3 decFromInt m._indexM)
				(strLeftSpacePadding 10 m.partitionM.volumeP.nameV)
				(strLeftSpacePadding 18 m.partitionM.nameP)
				(strLeftSpacePadding 10 if m.writableM then "writable" else "readonly")
				(strLeftSpacePadding mountWidth _strFromPath m.mountM)
				"  "
				(_strFromPath m.rootM)
			];
		echoLn "";
		true
	);;

fun fs=
	volumes;
	partitions;
	mounts;
	true;;

fun sys=
	echoLn "\nSystem status";
	echoLn "=============\n";
	fs;
	ms;
	ts;
	timers;
	inputs;
	true;;

fun kill id= 
	threadStop _threadById id;;

fun dumpCallstack id=
	let _threadById id -> th in
	if th<>nil then
	let lambda n1 i1 pkg=echoLn [(strLeftSpacePadding 16 n1) (strLeftSpacePadding 8 i1)] -> echoFormat in
	(
		call echoFormat "FUNCTION" "PC" "PKG";
//		dump _callstack th._threadT;
		for [name pc _ pkg] in threadCallstack th do 
			echoLn {(strLeftSpacePadding 16 name) (strLeftSpacePadding 8 decFromInt pc) "  " pkgName pkg};
//			call echoFormat name decFromInt pc;
		true
	);;

fun reboot= 
	set _HardStop=true;
	_reboot;;

fun hardStop=
	set _HardStop=true;;

fun niceStop=
	set _NiceStop=true;;


fun mountDir i path =
	let if i==nil then diskListInfo path else mountListInfo i path -> l in
	let listFilter l (lambda f= f._dirFI) -> lDirs in
	let listFilter l (lambda f= !f._dirFI) -> lFiles in
	(
		for p in listConcat (_filesSort lDirs) (_filesSort lFiles) do
		echoLn {
			(strLeftSpacePadding 12 if p._dirFI then "DIRECTORY" else decFromInt p._sizeFI)
			" | "
			(if p._updateFI<>nil then fullDate p._updateFI else "          [mounted partition]")
			" |"
			(strLeftSpacePadding 2 strFromInt p._mountFI)
			": "
			p._nameFI
		};
		echoLn [(listLength l) " element(s)"];
		true
	);;

fun dir path = mountDir nil path;;

fun nativeFonts=
	let hashsetCreate 8 -> h in (
		for fontName in _nativeFontList do hashsetAdd h fontName;
		let listFromHashset h -> lNames in
		let quicksort lNames (lambda a b= (strCmp a b)<0) -> lNames in
		for fontName in lNames do echoLn fontName
	);
	true;;
