/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

//-------------- IO check
var _Streams;;

// alive if at least one stream different from _InteralPipe
// (tail _Streams<>nil || head _Stream<>_internalPipe)
fun _streamAlive = (tail _Streams)<>nil;;		// there is always the internal stream
fun _streamCheck s=
	if s._thS._stateT <> _THREAD_DONE then true
	else (
		streamClose s;
		false
	);;

fun _streamOnSelectWrite s =
	threadPost s._thS s._onWriteS;
	true;;

fun _streamClean= \atomic
	let _Streams -> streams in (
	set _Streams=nil;
	let listFilter streams #_streamCheck -> streams in
	set _Streams=listConcat _Streams streams
);;

fun _schedulerInitIO =
	_internalInit;
	true;;

fun _streamClose s=
//	echoLn "]=== _sockClose"; dumpCallstack nil;
	call _IP.sockCloseII s._socketS;
	set s._socketS=nil;
	set s._thS=nil;
	set s._onReadS=nil;
	set s._onWriteS=nil;
	set _Streams= listRemove _Streams Stream<s;
	true;;

fun streamClose s= call s._closeS;;

fun streamWrite s data start =
//	echoLn strFormat "]=== streamWrite * *" start strLength data; dump
	let call s._writeS data start -> next in
	let strLength data -> len in (
		_sockSetSelectWrite s._socketS next<>nil && next<>len;
		sockSetWritable s._socketS next==len;
		next
	);;

fun _streamAddToList s=
	let Stream<s -> s in
	\atomic
		if !listContains _Streams s then (
			set _Streams=s:_Streams
		)
	;;
fun _streamRemoveFromList s=
	let Stream<s -> s in
	\atomic 
		set _Streams=listRemove _Streams s
	;;
fun _streamOnRead s onRead =
	set s._thS= _This;
	set s._onReadS= if onRead<>nil then (lambda data= 
//		echoLn strFormat "-> onRead * bytes" strLength data; hexDump data;
		call onRead data;
		0
	);
	if onRead<>nil then _streamAddToList s;
	_sockSetSelectRead s._socketS onRead<>nil;
	s;;

fun _streamOnWrite s onWrite =
	set s._thS= _This;
	set s._onWriteS= if onWrite<>nil then (lambda = call onWrite; 0);
	if onWrite<>nil then _streamAddToList s;
	s;;
fun streamSelectWrite s value =	_sockSetSelectWrite s._socketS value&&(s._onWriteS<>nil);;

fun streamOnEvent s onRead onWrite=
	_streamOnRead s onRead;
	_streamOnWrite s onWrite;
	s;;

fun _bestTimeout current next=
	if next==nil then current
	else if current==nil then next
	else let next-current -> delta in
	if delta<0 then next else current;;

fun _streamPrepareSelect fifoSelect =
	_streamClean;
	let nil -> timeout in (
		for s in _Streams do (
			if !_threadFull s._thS then (
				if (_sockSelectWrite s._socketS) && (_sockWritable s._socketS) then set timeout=timeMs;
				if (_sockSelectRead s._socketS) && (_sockReadable s._socketS) then set timeout=timeMs;
				if (_sockSelectWrite s._socketS)||(_sockSelectRead s._socketS) then (
//					dump s._socketS;
//					dump _sockSelectWrite s._socketS;
//					dump _sockSelectRead s._socketS;
					fifoIn fifoSelect s
				)
			)
		);
//		dump fifoCount fifoSelect;
		timeout
	);;

fun _ioCheck=
//	echoTime ["nbRun= " fifoCount _RunList];
	let timeMs+_SELECT_TIMEOUT -> timeout in
	let _bestTimeout timeout _timerTimeout -> timeout in
	let fifoCreate -> fifoSelect in
	let _bestTimeout timeout _streamPrepareSelect fifoSelect -> timeout in
	let _bestTimeout timeout if 0<>fifoCount _RunList then timeMs -> timeout in
	let max 0 timeout-timeMs -> wait in
	let if _isAlive then wait else 0 -> wait in 
	let fifoList fifoSelect -> lSelect in
	let listMap lSelect (lambda s= s._socketS) -> lSockets in
//	let max 1000 wait -> wait in
	(	

//		echo ".";
//		echoTime strFormat "nbStreams=* nbSocks=*  timeout=*" (listLength _Streams) (listLength lSockets) wait;
		_select lSockets wait;
		for s in lSelect do (
/*			if _sockWritable s._socketS then (
				echoLn "]=== _sockWritable"; // dump s
			);
			if _sockReadable s._socketS then (
				echoLn "]=== _sockReadable"; // dump s
			);
*/			if (_sockSelectWrite s._socketS) && (_sockWritable s._socketS) then (
				_sockSetSelectWrite s._socketS false;	// we remove it until the next uncomplete write
				call s._onSelectWriteS
			);
			if (_sockSelectRead s._socketS) && (_sockReadable s._socketS) then (
				_sockSetSelectRead s._socketS false;	// we remove it until the socket is read
				call s._onSelectReadS
			);
		);
		_workerCheck;
		_timerCheck
	);;
