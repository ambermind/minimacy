/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

struct IP=Stream+[_addrIP _portIP];;
struct TcpSrv=Stream+[_nameTS _onAcceptTS];;
struct Tcp=IP+[_incomingT];;
struct Udp=IP+[_localAddrU _localPortU _nameU _linkU];;
struct Eth=Stream+[_ifE];;

struct EthInterface=[
	ethCreateEI ethSendEI ethReadEI
];;
struct IpInterface=[
	sockCloseII
	udpCreateII udpSendII udpReadII
	tcpOpenII tcpNoDelayII tcpReadII tcpWriteII
	tcpListenII tcpAcceptII
];;

var _ETH=[
	ethCreateEI=#_ethCreate
//	ethCloseEI=#_ethClose
	ethSendEI=#_ethSend
	ethReadEI=#_ethRead
];;

fun ethStackOverwrite interface= set _ETH=interface;;

var _IP=[
	sockCloseII=#_socketClose
	udpCreateII=#_udpCreate
	udpSendII=#_udpSend
	udpReadII=#_udpRead
	tcpOpenII=#_tcpOpen
	tcpNoDelayII=#_tcpNoDelay
	tcpReadII=#_tcpRead
	tcpWriteII=#_tcpWrite
	tcpListenII=#_tcpListen
	tcpAcceptII=#_tcpAccept
];;

fun ipStackOverwrite interface=	set _IP=interface;;

fun ipRemoteAddr ip= ip._addrIP;;
fun ipRemotePort ip= ip._portIP;;

//-------------- Bsd TCP server
fun tcpSrvClose tcpSrv= streamClose TcpSrv<tcpSrv;;

fun tcpSrvCreate addr port=
	let call _IP.tcpListenII addr port -> socket in
	if socket<>nil then
	let [
		_thS=_This
		_nameTS=(strFormat "*:*" addr port)
	] -> tcpSrv in
	streamInit tcpSrv socket
		(lambda =	// onSelectRead
			_socketSetSelectRead socket true;
			if streamCheck tcpSrv then
			let call _IP.tcpAcceptII socket -> [socket addr port] in
			threadPost tcpSrv._thS (lambda =
				let _tcpCreate socket tcpSrv._thS addr port true -> tcp in 
				call tcpSrv._onAcceptTS tcp
			)
		)
		nil	// onSelectWrite
		nil	// write
		(lambda = call _IP.sockCloseII socket; streamCommonClose tcpSrv)	// close
		(lambda fEcho=	// show
			call fEcho "TCPsrv" tcpSrv._nameTS
		);;

fun tcpSrvOnAccept tcpSrv onAccept=
	set tcpSrv._thS= _This;
	set tcpSrv._onAcceptTS= if onAccept<>nil then (lambda tcp= call onAccept tcp; 0);
	if onAccept<>nil then _streamAddToList tcpSrv;
	_socketSetSelectRead (streamSocket tcpSrv) onAccept<>nil;
	tcpSrv;;

//-------------- Bsd TCP
fun tcpClose tcp= streamClose Tcp<tcp;;

fun _tcpCreate socket th addr port incoming=
	let [
		_addrIP=addr
		_portIP=port
		_incomingT=incoming
	] -> tcp in
	streamInit tcp socket
		(lambda =	// onSelectRead
			streamOnSelectRead tcp (lambda cbRead=
				let call _IP.tcpReadII socket -> data in
				(
//					echoLn ["]=== _socketRead " strLength data]; echoLn data;
					if data==nil then tcpClose tcp;
					call cbRead data;
				)
			)
		)
		(lambda = streamOnSelectWrite tcp)	// onSelectWrite
		(lambda data start =	// write
//			echo "_writeS "; echoLn
			call _IP.tcpWriteII socket data start
		)
		(lambda = call _IP.sockCloseII socket; streamCommonClose tcp)	// close
		(lambda fEcho=	// show
			call fEcho (if tcp._incomingT then "TCPin" else "TCPout") (strBuild [tcp._addrIP ":" tcp._portIP])
		);;

fun tcpOnEvent tcp onRead onWrite= streamOnEvent (Tcp<tcp) onRead onWrite;;

fun tcpOpen addr port =
	let call _IP.tcpOpenII addr port -> socket in
	if socket<>nil then _tcpCreate socket _This addr port false;;

fun tcpWrite tcp data start= streamWrite Tcp<tcp data start;;
fun tcpRemoteIp tcp= ipRemoteAddr Tcp<tcp;;
fun tcpRemotePort tcp= ipRemotePort Tcp<tcp;;

fun tcpNoDelay tcp noDelay= call _IP.tcpNoDelayII (Tcp<tcp)._socketS noDelay; tcp;;

//-------------- Bsd UDP
fun udpClose udp= streamClose Udp<udp;;

fun udpCreate remoteAddr remotePort localAddr localPort=
	let call _IP.udpCreateII localAddr localPort -> socket in
	let remoteAddr<>nil && remotePort<>nil -> link in
	if socket<>nil then
	let [
		_localAddrU=localAddr
		_localPortU=localPort
		_linkU= link
		_nameU= (strFormat "*:*" localAddr localPort)
		_addrIP=remoteAddr
		_portIP=remotePort
	] -> udp in
	streamInit udp socket
		(lambda =	// onSelectRead
			if streamCheck udp then
			threadPost udp._thS (lambda =
				_socketSetSelectRead socket true;
				let call _IP.udpReadII socket -> [data ip port] in
				if port<>nil then
				if udp._linkU then (
					if udp._addrIP==ip && udp._portIP==port then call udp._onReadS data
				)
				else (
					set udp._addrIP=ip;
					set udp._portIP=port;
					call udp._onReadS data
				)
			);
			true
		)
		(lambda = streamOnSelectWrite udp)	// onSelectWrite
		(lambda data start =	// write
			call _IP.udpSendII socket udp._localAddrU udp._localPortU udp._addrIP udp._portIP data	// start is ignored
		)
		(lambda = call _IP.sockCloseII socket; streamCommonClose udp)	// close
		(lambda fEcho=	// show
			call fEcho (if udp._linkU then "UDPlink" else "UDPsrv") udp._nameU
		);;

fun udpSend udp msg= streamWrite Udp<udp msg 0;;
fun udpSendTo udp addr port msg=
	set udp._addrIP=addr;
	set udp._portIP=port;
	udpSend udp msg;;

fun udpRemoteIp udp= ipRemoteAddr Udp<udp;;
fun udpRemotePort udp= ipRemotePort Udp<udp;;

fun udpOnEvent udp onRead onWrite= streamOnEvent (Udp < udp) onRead onWrite;;

//-------------- Ethernet
fun ethClose eth= streamClose eth;;

fun ethCreate ifindex=
	let call _ETH.ethCreateEI ifindex -> socket in
	if socket<>nil then
	let [
		_ifE=ifindex
	] -> eth in
	streamInit eth socket
		(lambda =	// onSelectRead
			_socketSetSelectRead socket true;
			if streamCheck eth then
			let call _ETH.ethReadEI socket -> data in	// should attribute this memory to the appropriate thread
//			if !bitTest 31 intRand then (echoLn "skip received frame"; nil) else
			threadPost eth._thS (lambda = call eth._onReadS data)
		)
		(lambda = streamOnSelectWrite eth)	// onSelectWrite
		(lambda data start =	// write
//			if !bitTest 31 intRand then (echoLn "skip sending frame"; nil) else
			call _ETH.ethSendEI socket eth._ifE data
		)
		(lambda = streamCommonClose eth)	// close
		(lambda fEcho=	// show
			call fEcho "ethernet" (strFormat "if*" eth._ifE)
		);;

fun ethOnEvent eth onRead onWrite= streamOnEvent (Eth<eth) onRead onWrite;;

fun ethSend eth msg= streamWrite eth msg 0;;

