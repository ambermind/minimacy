/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

var _Args=_args;;
fun args=_Args;;

fun _dirBestMatch dir candidate i result=
	let strCharPos candidate '/' i -> i in
	if i==nil then result
	else
	if !strEndsWith dir (strLeft candidate i+1) then result
	else _dirBestMatch dir candidate i+1 strLeft dir (-i);;

fun _systemDirFromFile file=
	let strReplace file "\\" "/" -> boot in
	let strLeft boot (-strLength SOURCE_EXTENSION) -> boot in	// remove .mcy
	let if _absoluteDir boot then boot else strConcat _currentDir boot -> path in
	let cleanPath path -> path in
	let strCharPosRev path '/' nil -> i in
	let strLeft path i+1 -> dir in
	let strSlice path i+1 nil -> pkg in
	let _dirBestMatch dir (strConcat "/" strReplace pkg "." "/") 1 dir  -> dir in
	[dir pkg];;

fun _getBootPkg lArgs =
	if lArgs==nil then ["boot" nil]
	else
	if !strEndsWith (head lArgs) SOURCE_EXTENSION then _getBootPkg tail lArgs
	else
	let _systemDirFromFile head lArgs -> [dir pkg] in
	(
		set _Args=tail lArgs;
		[pkg dir]
	);;	

fun _start compile=
	echoEnable true;
	let _getBootPkg args ->[pkg programDir] in
	(
		if _systemLogIsEnabled then echoLn ["> current time: " fullDate time];
		_fsInit programDir;
		_launchApp pkg compile nil
	);
	_schedulerStart;;

fun _handleArgs l compile=
	if l==nil then _start compile
	else let l -> a:b:_ in
	match a with
		"-c" -> _handleArgs (tail l) true,
		"--compile" ->_handleArgs (tail l) true,
		_ -> if strEndsWith a SOURCE_EXTENSION then _start compile
			else _handleArgs (tail l) compile;;

fun _init=
//	gcTrace true;
	gcCompact;
	_threadSetUser _threadCurrent _ThreadBios;
//	echoLn "args:"; dump args; return nil;
	_handleArgs args false;
	nil;;
