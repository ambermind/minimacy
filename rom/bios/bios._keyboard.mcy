/* Copyright (c) 2022, Sylvain Huet, Ambermind
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License, version 2.0, as
   published by the Free Software Foundation.
   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License,
   version 2.0, for more details.
   You should have received a copy of the GNU General Public License along
   with this program. If not, see <https://www.gnu.org/licenses/>. */

//------------ KEYBOARD
struct _Keyboard=Stream+[];;
var _KeyboardSock;;	// the keyboard socket is opened once in the VM lifetime
var _Keyboards;;

fun _keyboardClean= set _Keyboards=listFilter _Keyboards (lambda kb= kb._thS._stateT <> _THREAD_DONE);;
	
fun _keyboardSync=
	_keyboardClean;
	for kb in tail _Keyboards do _streamRemoveFromList kb;
	let head _Keyboards -> kb in
	if kb<>nil then (
		_socketSetSelectWrite kb._socketS true;
		_streamAddToList kb
	);;

fun onInput cbRead cbWrite=
	if cbRead<>nil then
	\atomic	if _KeyboardSock==nil then set _KeyboardSock=_keyboardOpen;
	_socketSetSelectRead _KeyboardSock true;
	let [_Keyboard] -> kb in
	(
		streamInit kb _KeyboardSock
			(lambda =	// onSelectRead
				streamOnSelectRead kb (lambda cbRead= 
					let _keyboardRead kb._socketS -> data in
					(
	//					dump data;
						call cbRead data;
						nil
					)
				)
			)
			(lambda = streamOnSelectWrite kb)	// onSelectWrite
			nil	// write
			(lambda = _keyboardSync; true)	// close
			(lambda fEcho= call fEcho "keyboard" "-");	// echo
\atomic (
		set _Keyboards= kb:_Keyboards;
		_keyboardSync
);
		streamOnEvent kb cbRead cbWrite;
		true
	);;

fun inputClose =
\atomic
	let head _Keyboards -> kb in
	if _This==kb._thS then (
	_streamRemoveFromList kb;
	set _Keyboards=tail _Keyboards;
	_keyboardSync;
	true
);;

struct _Serial=Stream+[];;

fun serialOpen port speed format parity stop=
	let _serialOpen port speed format parity stop -> serial in
	if serial<>nil then
	let _serialSocket serial -> socket in
	let [_Serial] -> stream in
	streamInit stream socket
		(lambda =	// onSelectRead
			streamOnSelectRead stream (lambda cbRead= call cbRead _serialRead serial)
		)
		(lambda = streamOnSelectWrite stream)	// onSelectWrite
		(lambda data start =	// write
//			echo "_writeS "; echoLn
			_serialWrite serial data start
		)
		(lambda = _serialClose serial; streamCommonClose stream)	// close
		(lambda fEcho= call fEcho "serial" port);;

fun serialOnEvent serial onRead onWrite= streamOnEvent serial onRead onWrite;;
fun serialWrite serial data start= streamWrite serial data start;;
fun serialClose serial = streamClose serial;;